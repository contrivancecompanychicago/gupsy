type Query {
  asset(id: String!, preview: Boolean, locale: String): Asset
  assetCollection(
    skip: Int = 0
    limit: Int = 100
    preview: Boolean
    locale: String
    where: AssetFilter
    order: [AssetOrder]
  ): AssetCollection
  caosReaxson1(id: String!, preview: Boolean, locale: String): CaosReaxson1
  caosReaxson1Collection(
    skip: Int = 0
    limit: Int = 100
    preview: Boolean
    locale: String
    where: CaosReaxson1Filter
    order: [CaosReaxson1Order]
  ): CaosReaxson1Collection
  caosReaxson(id: String!, preview: Boolean, locale: String): CaosReaxson
  caosReaxsonCollection(
    skip: Int = 0
    limit: Int = 100
    preview: Boolean
    locale: String
    where: CaosReaxsonFilter
    order: [CaosReaxsonOrder]
  ): CaosReaxsonCollection
  caos(id: String!, preview: Boolean, locale: String): Caos
  caosCollection(
    skip: Int = 0
    limit: Int = 100
    preview: Boolean
    locale: String
    where: CaosFilter
    order: [CaosOrder]
  ): CaosCollection
  sifidious(id: String!, preview: Boolean, locale: String): Sifidious
  sifidiousCollection(
    skip: Int = 0
    limit: Int = 100
    preview: Boolean
    locale: String
    where: SifidiousFilter
    order: [SifidiousOrder]
  ): SifidiousCollection
  cornfornFlakeS(id: String!, preview: Boolean, locale: String): CornfornFlakeS
  cornfornFlakeSCollection(
    skip: Int = 0
    limit: Int = 100
    preview: Boolean
    locale: String
    where: CornfornFlakeSFilter
    order: [CornfornFlakeSOrder]
  ): CornfornFlakeSCollection
  paleos(id: String!, preview: Boolean, locale: String): Paleos
  paleosCollection(
    skip: Int = 0
    limit: Int = 100
    preview: Boolean
    locale: String
    where: PaleosFilter
    order: [PaleosOrder]
  ): PaleosCollection
  entryCollection(
    skip: Int = 0
    limit: Int = 100
    preview: Boolean
    locale: String
    where: EntryFilter
    order: [EntryOrder]
  ): EntryCollection
}

# Represents a binary file in a space. An asset can be any file type.
type Asset {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
  title: String
  description: String
  contentType: String
  fileName: String
  size: Int
  url(transform: ImageTransformOptions): String
  width: Int
  height: Int
  linkedFrom(allowedLocales: [String]): AssetLinkingCollections
}

type Sys {
  id: String!
  spaceId: String!
  environmentId: String!
  publishedAt: DateTime
  firstPublishedAt: DateTime
  publishedVersion: Int
}

# A date-time string at UTC, such as 2007-12-03T10:15:30Z,
#     compliant with the 'date-time' format outlined in section 5.6 of
#     the RFC 3339 profile of the ISO 8601 standard for representation
#     of dates and times using the Gregorian calendar.
scalar DateTime

type ContentfulMetadata {
  tags: [ContentfulTag]!
}

# Represents a tag entity for finding and organizing content easily.
#     Find out more here: https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/content-tags
type ContentfulTag {
  id: String
  name: String
}

input ImageTransformOptions {
  # Desired width in pixels. Defaults to the original image width.
  width: Dimension

  # Desired height in pixels. Defaults to the original image height.
  height: Dimension

  # Desired quality of the image in percents.
  #         Used for `PNG8`, `JPG`, `JPG_PROGRESSIVE` and `WEBP` formats.
  quality: Quality

  # Desired corner radius in pixels.
  #         Results in an image with rounded corners (pass `-1` for a full circle/ellipse).
  #         Defaults to `0`. Uses desired background color as padding color,
  #         unless the format is `JPG` or `JPG_PROGRESSIVE` and resize strategy is `PAD`, then defaults to white.
  cornerRadius: Int

  # Desired resize strategy. Defaults to `FIT`.
  resizeStrategy: ImageResizeStrategy

  # Desired resize focus area. Defaults to `CENTER`.
  resizeFocus: ImageResizeFocus

  # Desired background color, used with corner radius or `PAD` resize strategy.
  #         Defaults to transparent (for `PNG`, `PNG8` and `WEBP`) or white (for `JPG` and `JPG_PROGRESSIVE`).
  backgroundColor: HexColor

  # Desired image format. Defaults to the original image format.
  format: ImageFormat
}

# The 'Dimension' type represents dimensions as whole numeric values between `1` and `4000`.
scalar Dimension

# The 'Quality' type represents quality as whole numeric values between `1` and `100`.
scalar Quality

enum ImageResizeStrategy {
  # Resizes the image to fit into the specified dimensions.
  FIT

  # Resizes the image to the specified dimensions, padding the image if needed.
  #         Uses desired background color as padding color.
  PAD

  # Resizes the image to the specified dimensions, cropping the image if needed.
  FILL

  # Resizes the image to the specified dimensions, changing the original aspect ratio if needed.
  SCALE

  # Crops a part of the original image to fit into the specified dimensions.
  CROP

  # Creates a thumbnail from the image.
  THUMB
}

enum ImageResizeFocus {
  # Focus the resizing on the center.
  CENTER

  # Focus the resizing on the top.
  TOP

  # Focus the resizing on the top right.
  TOP_RIGHT

  # Focus the resizing on the right.
  RIGHT

  # Focus the resizing on the bottom right.
  BOTTOM_RIGHT

  # Focus the resizing on the bottom.
  BOTTOM

  # Focus the resizing on the bottom left.
  BOTTOM_LEFT

  # Focus the resizing on the left.
  LEFT

  # Focus the resizing on the top left.
  TOP_LEFT

  # Focus the resizing on the largest face.
  FACE

  # Focus the resizing on the area containing all the faces.
  FACES
}

# The 'HexColor' type represents color in `rgb:ffffff` string format.
scalar HexColor

enum ImageFormat {
  # JPG image format.
  JPG

  # Progressive JPG format stores multiple passes of an image in progressively higher detail.
  #         When a progressive image is loading, the viewer will first see a lower quality pixelated version which
  #         will gradually improve in detail, until the image is fully downloaded. This is to display an image as
  #         early as possible to make the layout look as designed.
  JPG_PROGRESSIVE

  # PNG image format
  PNG

  # 8-bit PNG images support up to 256 colors and weigh less than the standard 24-bit PNG equivalent.
  #         The 8-bit PNG format is mostly used for simple images, such as icons or logos.
  PNG8

  # WebP image format.
  WEBP
  AVIF
}

type AssetLinkingCollections {
  entryCollection(
    skip: Int = 0
    limit: Int = 100
    preview: Boolean
    locale: String
  ): EntryCollection
  caosReaxson1Collection(
    skip: Int = 0
    limit: Int = 100
    preview: Boolean
    locale: String
  ): CaosReaxson1Collection
}

type EntryCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Entry]!
}

interface Entry {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
}

type CaosReaxson1Collection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CaosReaxson1]!
}

# Blog Site for Pharmakon Health Cloud Clients [See type definition](https://app.contentful.com/spaces/hn3v4nr2lb4g/content_types/caosReaxson1)
type CaosReaxson1 implements Entry {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): CaosReaxson1LinkingCollections
  caosReaxsonBlog(locale: String): String
  caosReaxsonBlog1(locale: String): CaosReaxson1CaosReaxsonBlog1
  caosReaxsonBlog2Collection(
    skip: Int = 0
    limit: Int = 100
    preview: Boolean
    locale: String
  ): AssetCollection
  caosReaxsonBlog3Collection(
    skip: Int = 0
    limit: Int = 100
    preview: Boolean
    locale: String
  ): CaosReaxson1CaosReaxsonBlog3Collection
  caosReaxson4(locale: String): JSON
}

type CaosReaxson1LinkingCollections {
  entryCollection(
    skip: Int = 0
    limit: Int = 100
    preview: Boolean
    locale: String
  ): EntryCollection
}

type CaosReaxson1CaosReaxsonBlog1 {
  json: JSON!
  links: CaosReaxson1CaosReaxsonBlog1Links!
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

type CaosReaxson1CaosReaxsonBlog1Links {
  entries: CaosReaxson1CaosReaxsonBlog1Entries!
  assets: CaosReaxson1CaosReaxsonBlog1Assets!
}

type CaosReaxson1CaosReaxsonBlog1Entries {
  inline: [Entry]!
  hyperlink: [Entry]!
  block: [Entry]!
}

type CaosReaxson1CaosReaxsonBlog1Assets {
  hyperlink: [Asset]!
  block: [Asset]!
}

type AssetCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Asset]!
}

type CaosReaxson1CaosReaxsonBlog3Collection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Entry]!
}

input AssetFilter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  description_exists: Boolean
  description: String
  description_not: String
  description_in: [String]
  description_not_in: [String]
  description_contains: String
  description_not_contains: String
  url_exists: Boolean
  url: String
  url_not: String
  url_in: [String]
  url_not_in: [String]
  url_contains: String
  url_not_contains: String
  size_exists: Boolean
  size: Int
  size_not: Int
  size_in: [Int]
  size_not_in: [Int]
  size_gt: Int
  size_gte: Int
  size_lt: Int
  size_lte: Int
  contentType_exists: Boolean
  contentType: String
  contentType_not: String
  contentType_in: [String]
  contentType_not_in: [String]
  contentType_contains: String
  contentType_not_contains: String
  fileName_exists: Boolean
  fileName: String
  fileName_not: String
  fileName_in: [String]
  fileName_not_in: [String]
  fileName_contains: String
  fileName_not_contains: String
  width_exists: Boolean
  width: Int
  width_not: Int
  width_in: [Int]
  width_not_in: [Int]
  width_gt: Int
  width_gte: Int
  width_lt: Int
  width_lte: Int
  height_exists: Boolean
  height: Int
  height_not: Int
  height_in: [Int]
  height_not_in: [Int]
  height_gt: Int
  height_gte: Int
  height_lt: Int
  height_lte: Int
  OR: [AssetFilter]
  AND: [AssetFilter]
}

input SysFilter {
  id_exists: Boolean
  id: String
  id_not: String
  id_in: [String]
  id_not_in: [String]
  id_contains: String
  id_not_contains: String
  publishedAt_exists: Boolean
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime]
  publishedAt_not_in: [DateTime]
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  firstPublishedAt_exists: Boolean
  firstPublishedAt: DateTime
  firstPublishedAt_not: DateTime
  firstPublishedAt_in: [DateTime]
  firstPublishedAt_not_in: [DateTime]
  firstPublishedAt_gt: DateTime
  firstPublishedAt_gte: DateTime
  firstPublishedAt_lt: DateTime
  firstPublishedAt_lte: DateTime
  publishedVersion_exists: Boolean
  publishedVersion: Float
  publishedVersion_not: Float
  publishedVersion_in: [Float]
  publishedVersion_not_in: [Float]
  publishedVersion_gt: Float
  publishedVersion_gte: Float
  publishedVersion_lt: Float
  publishedVersion_lte: Float
}

input ContentfulMetadataFilter {
  tags_exists: Boolean
  tags: ContentfulMetadataTagsFilter
}

input ContentfulMetadataTagsFilter {
  id_contains_all: [String]
  id_contains_some: [String]
  id_contains_none: [String]
}

enum AssetOrder {
  url_ASC
  url_DESC
  size_ASC
  size_DESC
  contentType_ASC
  contentType_DESC
  fileName_ASC
  fileName_DESC
  width_ASC
  width_DESC
  height_ASC
  height_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

input CaosReaxson1Filter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  caosReaxsonBlog_exists: Boolean
  caosReaxsonBlog: String
  caosReaxsonBlog_not: String
  caosReaxsonBlog_in: [String]
  caosReaxsonBlog_not_in: [String]
  caosReaxsonBlog_contains: String
  caosReaxsonBlog_not_contains: String
  caosReaxsonBlog1_exists: Boolean
  caosReaxsonBlog1_contains: String
  caosReaxsonBlog1_not_contains: String
  caosReaxsonBlog2Collection_exists: Boolean
  caosReaxsonBlog3Collection_exists: Boolean
  OR: [CaosReaxson1Filter]
  AND: [CaosReaxson1Filter]
}

enum CaosReaxson1Order {
  caosReaxsonBlog_ASC
  caosReaxsonBlog_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

# Backend support for Pharmakon Health Cloud [See type definition](https://app.contentful.com/spaces/hn3v4nr2lb4g/content_types/caosReaxson)
type CaosReaxson implements Entry {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): CaosReaxsonLinkingCollections
  caosmedicallabflowmindmap(locale: String): String
}

type CaosReaxsonLinkingCollections {
  entryCollection(
    skip: Int = 0
    limit: Int = 100
    preview: Boolean
    locale: String
  ): EntryCollection
}

type CaosReaxsonCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CaosReaxson]!
}

input CaosReaxsonFilter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  caosmedicallabflowmindmap_exists: Boolean
  caosmedicallabflowmindmap: String
  caosmedicallabflowmindmap_not: String
  caosmedicallabflowmindmap_in: [String]
  caosmedicallabflowmindmap_not_in: [String]
  caosmedicallabflowmindmap_contains: String
  caosmedicallabflowmindmap_not_contains: String
  OR: [CaosReaxsonFilter]
  AND: [CaosReaxsonFilter]
}

enum CaosReaxsonOrder {
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

# Chemical Analysis Operating System [See type definition](https://app.contentful.com/spaces/hn3v4nr2lb4g/content_types/caos)
type Caos implements Entry {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): CaosLinkingCollections
  caosReadme(locale: String): String
}

type CaosLinkingCollections {
  entryCollection(
    skip: Int = 0
    limit: Int = 100
    preview: Boolean
    locale: String
  ): EntryCollection
}

type CaosCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Caos]!
}

input CaosFilter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  caosReadme_exists: Boolean
  caosReadme: String
  caosReadme_not: String
  caosReadme_in: [String]
  caosReadme_not_in: [String]
  caosReadme_contains: String
  caosReadme_not_contains: String
  OR: [CaosFilter]
  AND: [CaosFilter]
}

enum CaosOrder {
  caosReadme_ASC
  caosReadme_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

# The Scientific World of Augmented Reality, 2D, and 3D concepts. [See type definition](https://app.contentful.com/spaces/hn3v4nr2lb4g/content_types/sifidious)
type Sifidious implements Entry {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): SifidiousLinkingCollections
  scienceEducation(locale: String): String
  scienceEducation2(locale: String): String
  scienceEducation1(locale: String): String
  scienceEducation4(locale: String): SifidiousScienceEducation4
  sifidiousIntentsEntities(locale: String): JSON
}

type SifidiousLinkingCollections {
  entryCollection(
    skip: Int = 0
    limit: Int = 100
    preview: Boolean
    locale: String
  ): EntryCollection
}

type SifidiousScienceEducation4 {
  json: JSON!
  links: SifidiousScienceEducation4Links!
}

type SifidiousScienceEducation4Links {
  entries: SifidiousScienceEducation4Entries!
  assets: SifidiousScienceEducation4Assets!
}

type SifidiousScienceEducation4Entries {
  inline: [Entry]!
  hyperlink: [Entry]!
  block: [Entry]!
}

type SifidiousScienceEducation4Assets {
  hyperlink: [Asset]!
  block: [Asset]!
}

type SifidiousCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Sifidious]!
}

input SifidiousFilter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  scienceEducation_exists: Boolean
  scienceEducation: String
  scienceEducation_not: String
  scienceEducation_in: [String]
  scienceEducation_not_in: [String]
  scienceEducation_contains: String
  scienceEducation_not_contains: String
  scienceEducation2_exists: Boolean
  scienceEducation2: String
  scienceEducation2_not: String
  scienceEducation2_in: [String]
  scienceEducation2_not_in: [String]
  scienceEducation2_contains: String
  scienceEducation2_not_contains: String
  scienceEducation1_exists: Boolean
  scienceEducation1: String
  scienceEducation1_not: String
  scienceEducation1_in: [String]
  scienceEducation1_not_in: [String]
  scienceEducation1_contains: String
  scienceEducation1_not_contains: String
  scienceEducation4_exists: Boolean
  scienceEducation4_contains: String
  scienceEducation4_not_contains: String
  OR: [SifidiousFilter]
  AND: [SifidiousFilter]
}

enum SifidiousOrder {
  scienceEducation_ASC
  scienceEducation_DESC
  scienceEducation2_ASC
  scienceEducation2_DESC
  scienceEducation1_ASC
  scienceEducation1_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

# [See type definition](https://app.contentful.com/spaces/hn3v4nr2lb4g/content_types/cornfornFlakeS)
type CornfornFlakeS implements Entry {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): CornfornFlakeSLinkingCollections
  caos(locale: String): String
  chemSpider(locale: String): CornfornFlakeSChemSpider
  chemSpider1(locale: String): Float
  chemSpider2(locale: String): Boolean
  chemSpider3Collection(
    skip: Int = 0
    limit: Int = 100
    preview: Boolean
    locale: String
  ): CornfornFlakeSChemSpider3Collection
}

type CornfornFlakeSLinkingCollections {
  entryCollection(
    skip: Int = 0
    limit: Int = 100
    preview: Boolean
    locale: String
  ): EntryCollection
}

type CornfornFlakeSChemSpider {
  json: JSON!
  links: CornfornFlakeSChemSpiderLinks!
}

type CornfornFlakeSChemSpiderLinks {
  entries: CornfornFlakeSChemSpiderEntries!
  assets: CornfornFlakeSChemSpiderAssets!
}

type CornfornFlakeSChemSpiderEntries {
  inline: [Entry]!
  hyperlink: [Entry]!
  block: [Entry]!
}

type CornfornFlakeSChemSpiderAssets {
  hyperlink: [Asset]!
  block: [Asset]!
}

type CornfornFlakeSChemSpider3Collection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Entry]!
}

type CornfornFlakeSCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CornfornFlakeS]!
}

input CornfornFlakeSFilter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  caos_exists: Boolean
  caos: String
  caos_not: String
  caos_in: [String]
  caos_not_in: [String]
  caos_contains: String
  caos_not_contains: String
  chemSpider_exists: Boolean
  chemSpider_contains: String
  chemSpider_not_contains: String
  chemSpider1_exists: Boolean
  chemSpider1: Float
  chemSpider1_not: Float
  chemSpider1_in: [Float]
  chemSpider1_not_in: [Float]
  chemSpider1_gt: Float
  chemSpider1_gte: Float
  chemSpider1_lt: Float
  chemSpider1_lte: Float
  chemSpider2_exists: Boolean
  chemSpider2: Boolean
  chemSpider2_not: Boolean
  chemSpider3Collection_exists: Boolean
  OR: [CornfornFlakeSFilter]
  AND: [CornfornFlakeSFilter]
}

enum CornfornFlakeSOrder {
  caos_ASC
  caos_DESC
  chemSpider1_ASC
  chemSpider1_DESC
  chemSpider2_ASC
  chemSpider2_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

# Portion Arrays Linearization Eigenvalue Object System [See type definition](https://app.contentful.com/spaces/hn3v4nr2lb4g/content_types/paleos)
type Paleos implements Entry {
  sys: Sys!
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): PaleosLinkingCollections
  gupsy1(locale: String): String
  gupsy(locale: String): PaleosGupsy
  food2(locale: String): Int
  food1(locale: String): Boolean
  food(locale: String): String
  superFoodsCollection(
    skip: Int = 0
    limit: Int = 100
    preview: Boolean
    locale: String
  ): PaleosSuperFoodsCollection
  food3(locale: String): JSON
  friedFoodsSchema(locale: String): JSON
  choline2D(locale: String): JSON
  superFoods1(locale: String): JSON
  nutritionix(locale: String): JSON
  edamam(locale: String): JSON
  gupsy2(locale: String): JSON
}

type PaleosLinkingCollections {
  entryCollection(
    skip: Int = 0
    limit: Int = 100
    preview: Boolean
    locale: String
  ): EntryCollection
}

type PaleosGupsy {
  json: JSON!
  links: PaleosGupsyLinks!
}

type PaleosGupsyLinks {
  entries: PaleosGupsyEntries!
  assets: PaleosGupsyAssets!
}

type PaleosGupsyEntries {
  inline: [Entry]!
  hyperlink: [Entry]!
  block: [Entry]!
}

type PaleosGupsyAssets {
  hyperlink: [Asset]!
  block: [Asset]!
}

type PaleosSuperFoodsCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Entry]!
}

type PaleosCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Paleos]!
}

input PaleosFilter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  gupsy1_exists: Boolean
  gupsy1: String
  gupsy1_not: String
  gupsy1_in: [String]
  gupsy1_not_in: [String]
  gupsy1_contains: String
  gupsy1_not_contains: String
  gupsy_exists: Boolean
  gupsy_contains: String
  gupsy_not_contains: String
  food2_exists: Boolean
  food2: Int
  food2_not: Int
  food2_in: [Int]
  food2_not_in: [Int]
  food2_gt: Int
  food2_gte: Int
  food2_lt: Int
  food2_lte: Int
  food1_exists: Boolean
  food1: Boolean
  food1_not: Boolean
  food_exists: Boolean
  food: String
  food_not: String
  food_in: [String]
  food_not_in: [String]
  food_contains: String
  food_not_contains: String
  superFoodsCollection_exists: Boolean
  OR: [PaleosFilter]
  AND: [PaleosFilter]
}

enum PaleosOrder {
  gupsy1_ASC
  gupsy1_DESC
  food2_ASC
  food2_DESC
  food1_ASC
  food1_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

input EntryFilter {
  sys: SysFilter
  contentfulMetadata: ContentfulMetadataFilter
  OR: [EntryFilter]
  AND: [EntryFilter]
}

enum EntryOrder {
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}
